plugins {
	id 'java'
	id 'maven'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.github.johnrengelman.shadow' version '2.0.2'
}
group = 'com.crossbrowsertesting'
version = '1.4.0'

description = """common classes for continuous integration plugins"""

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
     maven { url "http://repo.jenkins-ci.org/releases/" }
     maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'org.json', name: 'json', version:'20160810'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.9'
	compile group: 'com.fizzed', name: 'jne', version: '3.0.0'
	compile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25'
	compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
	compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'3.0.1'
}

github {
		owner = "crossbrowsertesting"
		repo = "ci-common"
		token = " "
		targetCommitish = "master"
		tagName = project.version
		name = project.version
		assets = [
				'build/libs/' + project.name + '-' + project.version + '.jar',
		]
		prerelease = false

}

// get the github token from an environment variable $GITHUB_TOKEN
githubRelease.doFirst {
	if (System.getenv().containsKey("GITHUB_TOKEN")) {
		github.token = System.getenv("GITHUB_TOKEN")
	} else {
		throw new GradleException("GITHUB_TOKEN environment variable is not set")
	}
	if(project.hasProperty("prerelease") && project.getProperty("prerelease") == "true") {
		// properly name the prerelease
		github.prerelease = true
		github.tagName = project.version + "-SNAPSHOT"
		github.name = project.version + "-SNAPSHOT"
		github.assets = [
				'build/libs/' + project.name + '-' + project.version + '-SNAPSHOT.jar',
		]
	}
}
task wrapper(type: Wrapper) {
	gradleVersion = '4.1'
}

jar.doFirst {
	// in case I forget to add .0 at the end of the project version
	if(project.version ==~ /\d+\.\d+/) {
		project.version += ".0"
	}
	// change the name if it is a prerelease
	if(project.hasProperty("prerelease") && project.getProperty("prerelease") == "true") {
		version = project.version + "-SNAPSHOT"
	}
}
task testLocalTunnelsJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'com.crossbrowsertesting.api.LocalTunnel'
	}
}

shadowJar {
	// ./gradlew shadowJar
	manifest {
		inheritFrom project.tasks.testLocalTunnelsJar.manifest
	}
	appendix = "localtunnels"
}
shadowJar.doFirst {
	// in case I forget to add .0 at the end of the project version
	if(project.version ==~ /\d+\.\d+/) {
		project.version += ".0"
	}
}
// clean and jar first
githubRelease.dependsOn(clean, jar)
